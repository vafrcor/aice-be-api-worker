const appRoot = require('app-root-path');
var moment = require('moment');

try{
	var load_env= require('dotenv').config({ path: appRoot+'/.env' });
	if (load_env.error) {
	  throw result.error;
	}
}catch(e){
	console.log('ENV File loader \\ Error: ', e);
}

// console.log('ENV files: ', process.env);

const fs = require('fs');
const dotProp = require('dot-prop');
const _= require('lodash');

const objectConfig= require(appRoot+"/helpers/object_config.js");
let objectJSON= objectConfig.read('/configs/objects.json');
let database= objectConfig.read('/configs/database.json');
let storage= objectConfig.read('/configs/storage.json');

var app_debug= process.env.APP_DEBUG || 'false';
var app_env= process.env.APP_ENV || 'local';

app_debug = app_debug == 'true'? true : false;
console.log('['+moment().format('YYYY-MM-DD hh:mm:ss.SSS')+'] APP DEBUG: '+app_debug);

//# Load MQTT custom subscriber
let sub_mqtt_options={
	debug: app_debug,
	objects: objectJSON,
	storage: storage
};
const mqtt_subscriber=require(appRoot+'/helpers/mqtt_subscriber.js')(sub_mqtt_options);

//# Run MQTT service  
let mqtt_options={
	debug: app_debug,
	connection: database.mqtt,
	objects: objectJSON,
	event_subscriber: mqtt_subscriber,
	storage: storage
};
const mqtt_service=require(appRoot+'/helpers/mqtt_server.js')(mqtt_options);

//# Run Scheduler service
let schedule_options={
	debug: app_debug,
	objects: objectJSON,
	mqtt_service: mqtt_service,
	storage: storage
};
const schedule_service=require(appRoot+'/helpers/schedule.js')(schedule_options);

//# Test purpose only
test_signal_toilet_status=process.env.APP_TEST_SIGNAL_TOILET_DOOR_STATUS || 'false';
if((test_signal_toilet_status == 'true') && _.includes(['local','development','staging'],app_env)) {
	setInterval(function(){
		console.log('['+moment().format('YYYY-MM-DD hh:mm:ss.SSS')+'] Test \\ MQTT Publish: lb/toilet-tengah/door-status');
		// lorem ipsum dolor sit amet
		mqtt_service.client.publish('lb/toilet-tengah/door-status', _.random(0,1).toString());
	}, 5000);
}
